{"version":3,"sources":["components/itemOrder.jsx","components/tableOrders.jsx","components/controlAddOrder.jsx","components/panelOrders.jsx","components/itemOrderScreenPreview.jsx","components/tableOrdersScreenPreview.jsx","components/panelOrdersScreenPreview.jsx","components/appOrder.jsx","App.js","serviceWorker.js","index.js"],"names":["ItemOrder","props","handleClick","state","delete","document","removeEventListener","handleOutsideClick","addEventListener","setState","prevState","e","this","order","status","Fragment","className","role","onClick","onOrderStatusChange","type","id","value","ref","node","onOrderDelete","aria-label","aria-hidden","renderOrderBtn","Component","TableOrders","handleOrderDelete","bind","handleOrderStatusChange","filterText","addOrderControlValue","rows","tableOrdersValue","forEach","indexOf","push","key","ControlAddOrder","handleChange","target","length","hideInvalidData","showInvalidData","handleFilterTextChange","clearInput","getElementById","nameInput","focus","classList","add","remove","invalid","addOrder","onAddNewOrder","handleKeyDown","event","defaultValue","onFilterTextChange","input","placeholder","onChange","onKeyDown","PanelOrders","handleAddNewOrder","ItemOrderScreenPreview","TableOrdersScreenPreview","index","renderRows","rowNb","renderColumns","columnNb","PanelOrdersScreenPreview","AppOrder","nbOrderPreview","nbPreview","filter","t","map","generateOrderId","sort","sortByProperty","Math","floor","random","toString","ordersPreviewParameter","bgColor","orderColor","newOrderColor","nbItemsColumn","nbColumns","Date","getTime","property","a","b","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e4541e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ItemOrder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            delete: false\n        };\n    }\n\n    handleClick = () => {\n        if (!this.state.delete) {\n          // attach/remove event handler\n          document.addEventListener('click', this.handleOutsideClick, false);\n        } else {\n          document.removeEventListener('click', this.handleOutsideClick, false);\n        }\n    \n        this.setState(prevState => ({\n            delete: !prevState.delete,\n         }));\n      }\n\n      handleOutsideClick = (e) => {        \n        this.handleClick();\n      }\n\n    //-----------------------------------------------------------------------------------------------\n    //FUNCTIONS TO RENDER PARTS\n    //-----------------------------------------------------------------------------------------------\n    renderOrderBtn() {\n\n        // const txtAffiche = \"Affiché\"\n        // const txtNonAffiche = \"Non affiché\"\n\n        //Déterminer comment afficher le bouton de la commande en fonction de son statut affiché (1) ou non affiché (0).\n        if (!this.state.delete) {\n            if (this.props.order.status === 0) {\n                return (\n                    <React.Fragment>\n                        {/* <td className=\"w-50 pl-5 text-center align-middle\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} className=\"btn btn-outline-dark btn-sm\" type=\"button\" id=\"btn_status_order\">\n                                {txtNonAffiche}\n                            </button>\n                        </td> */}\n                        <div className=\"flexValues btn-group mr-2 my-1\" role=\"group\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} type=\"button\" className=\"btn btn-dark text-strong\" id=\"btn_status_order\">{this.props.order.value}</button>\n                            <button ref={(node) => { this.node = node; }} onClick={this.handleClick} aria-label=\"Close\" type=\"button\" id=\"btn_delete_order\" className=\"btn btn-dark\"><span aria-hidden=\"true\">&times;</span></button>\n                        </div>\n                    </React.Fragment>\n                );\n            } else {\n                return (\n                    <React.Fragment>\n                        {/* <td className=\"w-50 pl-5 text-center align-middle\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} className=\"btn btn-outline-success btn-sm\" type=\"button\" id=\"btn_status_order\">\n                                {txtAffiche}\n                            </button>\n                        </td> */}\n                        <div className=\"flexValues btn-group mr-2 my-1\" role=\"group\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} type=\"button\" className=\"btn btn-success text-strong\" id=\"btn_status_order\">{this.props.order.value}</button>\n                            <button ref={(node) => { this.node = node; }} onClick={this.handleClick} aria-label=\"Close\" type=\"button\" id=\"btn_delete_order\" className=\"btn btn-success\"><span aria-hidden=\"true\">&times;</span></button>\n                        </div>\n                    </React.Fragment>\n                );\n            }\n        } else {\n            if (this.props.order.status === 0) {\n                return (\n                    <React.Fragment>\n                        {/* <td className=\"w-50 pl-5 text-center align-middle\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} className=\"btn btn-outline-dark btn-sm\" type=\"button\" id=\"btn_status_order\">\n                                {txtNonAffiche}\n                            </button>\n                        </td> */}\n                        <div className=\"flexValues btn-group mr-2 my-1\" role=\"group\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} type=\"button\" className=\"btn btn-dark text-strong\" id=\"btn_status_order\">{this.props.order.value}</button>\n                            <button ref={(node) => { this.node = node; }} onClick={() => this.props.onOrderDelete(this.props.order.id)} aria-label=\"Close\" type=\"button\" id=\"btn_delete_order\" className=\"btn btn-danger\"><span aria-hidden=\"true\">&times;</span></button>\n                        </div>\n                    </React.Fragment>\n                );\n            } else {\n                return (\n                    <React.Fragment>\n                        {/* <td className=\"w-50 pl-5 text-center align-middle\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} className=\"btn btn-outline-success btn-sm\" type=\"button\" id=\"btn_status_order\">\n                                {txtAffiche}\n                            </button>\n                        </td> */}\n                        <div className=\"flexValues btn-group mr-2 my-1\" role=\"group\">\n                            <button onClick={() => this.props.onOrderStatusChange(this.props.order)} type=\"button\" className=\"btn btn-success text-strong\" id=\"btn_status_order\">{this.props.order.value}</button>\n                            <button ref={(node) => { this.node = node; }} onClick={() => this.props.onOrderDelete(this.props.order.id)} aria-label=\"Close\" type=\"button\" id=\"btn_delete_order\" className=\"btn btn-danger\"><span aria-hidden=\"true\">&times;</span></button>\n                        </div>\n                    </React.Fragment>\n                );\n            }\n        }\n        \n    }\n    \n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n        return (\n            <React.Fragment>\n                {/* <td className=\"w-25 text-left align-middle pl-4\">\n                    <span><strong>{this.props.order.value}</strong></span>\n                </td>\n                {\n                    this.renderOrderBtn()\n                }\n                <td className=\"w-25 text-right align-middle pr-4\">\n                        <button onClick={() => this.props.onOrderDelete(this.props.order.id)} className=\"close\" aria-label=\"Close\" type=\"button\" id=\"btn_delete_order\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                </td> */}\n                {\n                    this.renderOrderBtn()\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ItemOrder;","import React, { Component } from 'react';\nimport ItemOrder from './itemOrder';\n\nclass TableOrders extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //CONSTRUCTOR INITIALISATION\n    //-----------------------------------------------------------------------------------------------\n    constructor(props) {\n        super(props);\n        this.handleOrderDelete = this.handleOrderDelete.bind(this);\n        this.handleOrderStatusChange = this.handleOrderStatusChange.bind(this);\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //HANDLE FUNCTIONS FROM PARENT\n    //-----------------------------------------------------------------------------------------------\n\n    /**\n    * Supprimer une commande dans le tableau des commandes.\n    * @param  {Number} order ID de la commande à supprimer.\n    */\n    handleOrderDelete(e) {\n        this.props.onOrderDelete(e)\n    }\n\n    /**\n    * Changer le statut d'une commande pour l'afficher ou l'enlever de l'écran d'affichage.\n    * @param  {Order} order Objet de la commande à changer de status.\n    */\n    handleOrderStatusChange(e) {\n        this.props.onOrderStatusChange(e)\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n\n        const filterText = this.props.addOrderControlValue;\n\n        const rows = [];\n\n        \n            this.props.tableOrdersValue.forEach((order) => {\n                if (filterText) {\n                    if (order.value.indexOf(filterText) !== 0) {\n                        return;\n                    }\n                }\n                rows.push(\n                    <ItemOrder key={order.id} order={order} onOrderDelete={this.handleOrderDelete} onOrderStatusChange={this.handleOrderStatusChange} />\n                );\n            });\n        \n        return (\n            <React.Fragment>\n            {/* <table className=\"table\">\n                <tbody>\n                    {this.props.tableOrdersValue.map((order, index) => (\n                        <tr key={order.id}>\n                            <ItemOrder order={order} onOrderDelete={this.handleOrderDelete} onOrderStatusChange={this.handleOrderStatusChange} />\n                        </tr>\n                    ))}\n                </tbody>\n            </table> */}\n            \n            <div className=\"FlexContainer d-flex flex-wrap ml-3 mr-2 mt-3 justify-content-center align-items-center\">{rows}\n                {/* {this.props.tableOrdersValue.map((order, index) => (\n                            <ItemOrder order={order} onOrderDelete={this.handleOrderDelete} onOrderStatusChange={this.handleOrderStatusChange} />\n                    ))} */}\n            </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TableOrders;","import React, { Component } from 'react';\n\nconst limitChar = 6;\n\nclass ControlAddOrder extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //CONSTRUCTOR INITIALISATION\n    //-----------------------------------------------------------------------------------------------\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultValue: \"\",\n            value: this.props.addOrderControlValue,\n            invalid: false\n        };\n\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //UTILITY FUNCTIONS\n    //-----------------------------------------------------------------------------------------------\n\n    /**\n    * Gère le texte de la boîte de saisie et vérifie si le texte saisie respecte les standards établis. Appelé par le onChange de la boîte de saisie.\n    * @param  {String} e Valeur textuel de la boîte de saisie à utiliser pour ajouter une nouvelle commande.\n    */\n    handleChange = (e) => {\n        if (e.target.value.length <= limitChar)\n            this.hideInvalidData();\n        else if (e.target.value.length > limitChar)\n            this.showInvalidData();\n\n        this.handleFilterTextChange(e.target.value)\n\n        this.setState({\n            value: e.target.value\n        });\n    }\n\n    /**\n    * Gère le texte de la boîte de saisie pour mettre à jour la valeur de filtre de recherche. Utilisé par handleChange qui est appelé par le onChange de la boîte de saisie.\n    * @param  {String} e Valeur textuel du filtre à utiliser pour afficher les bonnes commandes.\n    */\n    handleFilterTextChange(e) {\n        this.props.onFilterTextChange(e);\n    }\n\n    /**\n    * Remet le texte de la boîte de saisie à vide lorsqu'une nouvelle commande est ajouté.\n    */\n    clearInput = () => {\n        //Effacer la valeur existante de l'input\n        document.getElementById(\"orderValue\").value = \"\";\n        this.nameInput.focus();\n\n        //Mettre à jour le state du composant local\n        this.setState({ value:\"\" });\n    }\n\n    /**\n    * Change le style de la boîte de saisie pour montrer une saisie invalide et affiche l'erreur sous la boîte.\n    */\n    showInvalidData = () => {\n        document.getElementById(\"orderValue\").classList.add(\"is-invalid\");\n        document.getElementById(\"invalidInputError\").classList.remove(\"invisible\");\n        \n        this.setState({\n            invalid: true\n        });\n    }\n\n    /**\n    * Change le style de la boîte de saisie pour retirer le style d'une saisie invalide et cache l'erreur sous la boîte.\n    */\n    hideInvalidData = () => {\n        document.getElementById(\"orderValue\").classList.remove(\"is-invalid\");\n        document.getElementById(\"invalidInputError\").classList.add(\"invisible\");\n        \n        this.setState({\n            invalid: false\n        });\n    }\n\n    /**\n    * Ajouter une commande dans le tableau des commandes. Déclenché par le onClick du bouton + Ajouter.\n    */\n    addOrder = () => {\n        if (this.state.value.length > limitChar) {\n            \n        } else {\n            this.props.onAddNewOrder(this.state.value);\n            this.clearInput();\n        }\n        \n    }\n\n    /**\n    * Événement sur la fin du rendu des composants. Permet de sélectionner la boîte de saisie par défaut pour ajouter du texte plus rapidement.\n    */\n    componentDidMount(){\n        this.nameInput.focus();\n    }\n\n    /**\n    * Événement sur l'appuie de Enter lorsqu'on est en édition sur la boîte de saisie. Permet d'ajouter une commande en cliquant sur Enter pour plus de rapidité.\n    */\n    handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            this.addOrder()\n        }\n    }\n    \n\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n        return (\n            <div className=\"AddControl input-group\">\n                <input ref={(input) => { this.nameInput = input; }} type=\"text\" className=\"AddControl form-control ml-3 mb-1 mt-1\" id=\"orderValue\" placeholder=\"Entrez un # de commande\" onChange={this.handleChange} onKeyDown={this.handleKeyDown}/>\n                <div className=\"input-group-append mr-3 mb-1 mt-1\">\n                    <button onClick={this.addOrder} className=\"AddControl btn btn-secondary rounded-right\" type=\"button\" id=\"button-addon2\">+ Ajouter</button>\n                </div>\n                <div id=\"invalidInputError\" className=\"invalid-feedback text-wrap invisible ml-3 mr-3\">\n                    Numéro de commande invalide. (Dois être de {limitChar} caractères maximum)\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ControlAddOrder;","import React, { Component } from 'react';\nimport TableOrders from './tableOrders';\nimport ControlAddOrders from './controlAddOrder';\n\nclass PanelOrders extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //CONSTRUCTOR INITIALISATION\n    //-----------------------------------------------------------------------------------------------\n    constructor(props) {\n        super(props);\n        this.handleOrderDelete = this.handleOrderDelete.bind(this);\n        this.handleOrderStatusChange = this.handleOrderStatusChange.bind(this);\n        this.handleAddNewOrder = this.handleAddNewOrder.bind(this);\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //HANDLE FUNCTIONS FROM PARENT\n    //-----------------------------------------------------------------------------------------------\n\n    /**\n    * Supprimer une commande dans le tableau des commandes.\n    * @param  {Number} order ID de la commande à supprimer.\n    */\n    handleOrderDelete(e) {\n        this.props.onOrderDelete(e)\n    }\n\n    /**\n    * Changer le statut d'une commande pour l'afficher ou l'enlever de l'écran d'affichage.\n    * @param  {Order} order Objet de la commande à changer de status.\n    */\n    handleOrderStatusChange(e) {\n        this.props.onOrderStatusChange(e)\n    }\n\n    /**\n    * Ajouter une commande dans le tableau des commandes.\n    * @param  {String} value Valeur de la nouvelle commande à ajouter (Numéro de commande).\n    */\n    handleAddNewOrder(e) {\n        this.props.onAddNewOrder(e)\n    }\n\n    /**\n    * Modifie le texte qui permet de filtrer les commandes lorsqu'on veux trouver une commande rapidement.\n    * @param  {String} filterText Valeur textuel du filtre à utiliser pour afficher les bonnes commandes.\n    */\n    handleFilterTextChange(e) {\n        this.props.onFilterTextChange(e);\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n        return (\n            <div className=\"col-auto order-12 order-sm-12 order-md-12 order-lg-1 order-xl-1\">\n                <div className=\"card Commandes\">\n                    {/* <div className=\"card-header\">\n                        <h5>Commandes</h5>\n                    </div> */}\n                    <div className=\"card-block px-0 py-3\">\n                        <div className=\"table-responsive\">\n                            <ControlAddOrders addOrderControlValue={this.props.addOrderControlValue} onFilterTextChange={this.handleFilterTextChange} onAddNewOrder={this.handleAddNewOrder} />\n                            <TableOrders tableOrdersValue={this.props.tableOrdersValue} addOrderControlValue={this.props.addOrderControlValue} onOrderStatusChange={this.handleOrderStatusChange} onOrderDelete={this.handleOrderDelete} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PanelOrders;","import React, { Component } from 'react';\n\nclass ItemOrderScreenPreview extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n        return (\n            <div className=\"col-6 text-center mx-0 my-0 px-0 py-0 Preview-OrderNumber align-middle\">\n                {this.props.value}\n            </div>\n        );\n    }\n}\n\nexport default ItemOrderScreenPreview;","import React, { Component } from 'react';\nimport ItemOrderScreenPreview from './itemOrderScreenPreview';\n\nclass TableOrdersScreenPreview extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n\n        const rows = [];\n        const nbRows = 8;\n        const nbColumns = 2;\n\n        //Boucle sur tous les commandes pour afficher dans l'écran preview tous les commandes qui ont un statut affiché (1). \n        this.props.tableOrdersValue.forEach((order, index) => {\n            if (order.status === 1) {\n                rows.push(\n                    <ItemOrderScreenPreview value={order.value} key={order.id} />\n                );\n            }\n        });\n\n        let renderRows = [];\n\n        //Génère un tableau qui affiche les commandes en ordre alpha-numérique dans l'écran de preview. \n        for (var rowNb=0; rowNb < nbRows; rowNb++) {\n            let renderColumns = [];\n            for (var columnNb=0; columnNb < nbColumns; columnNb++) {\n                if (rows[nbRows*columnNb+rowNb] != null)\n                    renderColumns.push(rows[nbRows*columnNb+rowNb])\n                else\n                    renderColumns.push(<div key={'row' + rowNb + 'col' + columnNb} className=\"col-3 mx-0 my-0 px-0 py-0 Preview-OrderNumber\"></div>)\n            }\n            renderRows.push(<div key={'col' + columnNb + 'row' + rowNb} className=\"row Preview-Row mx-0 my-0\">{renderColumns}</div>)\n        }\n\n        return (\n            <div className=\"container Preview-List\">\n                {renderRows}\n            </div>\n        );\n    }\n}\n\nexport default TableOrdersScreenPreview;","import React, { Component } from 'react';\nimport TableOrdersScreenPreview from './tableOrdersScreenPreview';\n\nclass PanelOrdersScreenPreview extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n        return (\n            <div className=\"col-auto order-1 order-sm-1 order-md-1 order-lg-12 order-xl-12\">\n                <div className=\"card Screen-Preview\">\n                    {/* <div className=\"\">\n                        <h4 className=\"text-white mt-2 ml-3\">Prêt</h4>\n                    </div> */}\n                    <div className=\"card-block Screen-Preview px-0 py-0\">\n                        <TableOrdersScreenPreview tableOrdersValue={this.props.tableOrdersValue}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PanelOrdersScreenPreview;","import React, { Component } from 'react';\nimport PanelOrders from './panelOrders';\nimport PanelOrdersScreenPreview from './panelOrdersScreenPreview';\n\nclass AppOrder extends Component {\n    //-----------------------------------------------------------------------------------------------\n    //CONSTRUCTOR INITIALISATION\n    //-----------------------------------------------------------------------------------------------\n    constructor(props) {\n        super(props);\n        this.state = {\n            addOrderControlValue: \"\",\n            nbPreview: 3,\n            ordersPreviewParameter: { \n                bgColor: \"\",\n                orderColor: \"\",\n                newOrderColor: \"\",\n                nbItemsColumn: 5,\n                nbColumns: 3\n            },\n            tableOrdersValue : [\n                { id: 0, value: \"12345\", status: 0 },\n                { id: 1, value: \"15656\", status: 0 },\n                { id: 2, value: \"23452\", status: 0 },\n                { id: 3, value: \"34678\", status: 0 },\n                { id: 4, value: \"45794\", status: 1 },\n                { id: 5, value: \"73248\", status: 1 },\n                { id: 6, value: \"94732\", status: 0 },\n                { id: 7, value: \"98233\", status: 1 }\n            ]\n        };\n\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //HANDLE FUNCTIONS FOR CHILD COMPONENTS\n    //-----------------------------------------------------------------------------------------------\n\n    /**\n    * Supprimer une commande dans le tableau des commandes.\n    * @param  {Number} order ID de la commande à supprimer.\n    */\n    handleOrderDelete = order => {\n        var nbOrderPreview = this.state.nbPreview\n\n        const tableOrdersValue = this.state.tableOrdersValue.filter((t) => {\n            if (t.status === 1 && t.id === order) {\n                nbOrderPreview -= 1;\n            }\n\n            return t.id !== order\n        });\n        this.setState({ nbPreview: nbOrderPreview, tableOrdersValue });\n    }\n\n    /**\n    * Changer le statut d'une commande pour l'afficher ou l'enlever de l'écran d'affichage.\n    * @param  {Order} order Objet de la commande à changer de status.\n    */\n    handleOrderStatusChange = order => {\n        const tableOrdersValue = [...this.state.tableOrdersValue];\n        var nbOrderPreview = this.state.nbPreview\n\n        tableOrdersValue.map((t) => {\n            if (t.id === order.id) {\n                if (t.status === 1) {\n                    t.status = 0;\n                    nbOrderPreview -= 1;\n                } else if (nbOrderPreview === 16) {\n                    t.status = 0;\n                } else {\n                    t.status = 1;\n                    nbOrderPreview += 1;\n                }\n                    \n            }\n            return t;\n        });\n        this.setState({ nbPreview: nbOrderPreview, tableOrdersValue });\n        \n    }\n\n    /**\n    * Ajouter une commande dans le tableau des commandes.\n    * @param  {String} value Valeur de la nouvelle commande à ajouter (Numéro de commande).\n    */\n    handleAddNewOrder = value => {\n        if (value) {\n            const tableOrdersValue = [...this.state.tableOrdersValue];\n            tableOrdersValue.push(\n                {\n                    id: this.generateOrderId(),\n                    value: value,\n                    status: 0,\n                }\n            );\n            \n            tableOrdersValue.sort(this.sortByProperty(\"value\"));\n\n            this.setState({ addOrderControlValue: \"\", tableOrdersValue })\n        } else {\n            const tableOrdersValue = [...this.state.tableOrdersValue];\n            tableOrdersValue.push(\n                {\n                    id: this.generateOrderId(),\n                    value: Math.floor(10000 + Math.random() * 90000).toString(),\n                    status: 0,\n                }\n            );\n            \n            tableOrdersValue.sort(this.sortByProperty(\"value\"));\n\n            this.setState({ addOrderControlValue: \"\", tableOrdersValue })\n        }\n    }\n\n    /**\n    * Modifie le texte qui permet de filtrer les commandes lorsqu'on veux trouver une commande rapidement.\n    * @param  {String} filterText Valeur textuel du filtre à utiliser pour afficher les bonnes commandes.\n    */\n    handleFilterTextChange(filterText) {\n        this.setState({\n            addOrderControlValue: filterText\n        });\n    }\n\n    //-----------------------------------------------------------------------------------------------\n    //UTILITY FUNCTIONS\n    //-----------------------------------------------------------------------------------------------\n\n    /**\n    * Génère un ID pour les nouvelles commandes ajoutées.\n    */\n    generateOrderId() {\n        let d = new Date();\n        var n = d.getTime();\n        return n;\n    }\n\n    /**\n    * Permet de faire un tri dans un tableau d'objet à partir d'une propriété de l'objet.\n    * * @param  {String} property Nom de la propriété de l'objet sur laquelle trier.\n    */\n    sortByProperty(property){\n        return (a, b) => {\n           if(a[property] > b[property])\n              return 1;\n           else if(a[property] < b[property])\n              return -1;\n           return 0;\n        }  \n     }\n\n    //-----------------------------------------------------------------------------------------------\n    //FINAL RENDER FUNCTION\n    //-----------------------------------------------------------------------------------------------\n    render() {\n        return (\n            <React.Fragment>\n                <PanelOrders tableOrdersValue={this.state.tableOrdersValue} addOrderControlValue={this.state.addOrderControlValue} onFilterTextChange={this.handleFilterTextChange} onOrderStatusChange={this.handleOrderStatusChange} onOrderDelete={this.handleOrderDelete} onAddNewOrder={this.handleAddNewOrder} />\n                <PanelOrdersScreenPreview tableOrdersValue={this.state.tableOrdersValue} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default AppOrder;","import React, { Component } from 'react';\n/* import Orders from './components/orders';\nimport OrdersScreenPreview from './components/ordersScreenPreview'; */\nimport AppOrder from './components/appOrder';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app-main-container\">\n        <div className=\"app-wrapper\">\n          <div className=\"app-content\">\n            <div className=\"app-inner-content\">\n              <div className=\"main-body\">\n                <div className=\"page-wrapper\">\n                  <div className=\"row justify-content-center\">\n                    <AppOrder />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}